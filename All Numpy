from numpy import *
import numpy as np

x=[1,2,3,4]
print(sum(x[i] for i in range(x))/len(x))



'''ar=np.array([1,2,3])
print(ar.shape)
######################################################################################
arr=np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16],[57,578,75]])
print(arr.shape)
print(arr.itemsize)'''

'''print("*"*50)

print(arr)
print("*"*50)
##########################################################################################3
print(arr.itemsize)  # Used to displat memorysize taken by that array [int- 4 bytes memory allocated],[float-8]

print("*"*50)
######################################################################################
arr=array([[1,2,3],[5,6,7]]) # We can give n number of rows by seperating commas

arr.shape=(3,2) #this is like changing

arr1=arr.reshape(6,1) #this is like function call

print(arr)

print("*"*50)

print(arr1)
#######################################################################################3
arr=np.arange(24) #to print 0 to 23 numbers
print(arr)

print("*"*50)   

###########################################################################################

print("*"*50)

arr=np.zeros(5) #by default it gives float values
arr=np.zeros(5,int) # if we pass int ,it gives int values
print(arr)

print("*"*50)
########################################################################################
arr=np.ones(5) #by default it gives float values
arr2=np.ones(5,int) # if we pass int ,it gives int values
print(arr2)

print("*"*50)

arr=np.ones((3,4),int) 
print(arr)

print("*"*50)
########################################################################################3
arr=np.zeros((3,4),int)
print(arr)

print("*"*50)
##################################################################3####################
print(arr.size)

print("*"*50)
######################################################################################
print(arr.dtype)
##################################################################################@#####
# to convert list and a tuple to an array
print("*"*50)

x=[1,2,3,4,5]
y=(6,7,8,9,10)
arr1=np.asarray(x)
arr2=np.asarray(y)
print(arr1,arr2)

print("*"*50)
#########################################################################################
arr1=np.arange(12,dtype=float) #by default it produces int but we can change it by changing dtype
print(arr1)

print("*"*50)

arr1=np.arange(12,20,2,dtype=float)  # we can give step
print(arr1)

print("*"*50)
##########################################################################################
arr1=np.linspace(10,20,7)   #how many times the values are divided not """""step"""""
print(arr1)

print("*"*50)

# in arange we will not get the last value but in linspace we will get the last value also but if we dont want last digit see below code

arr1=np.linspace(10,20,7,endpoint=False)   #how many times the values are divided not """""step"""""
print(arr1)

print("*"*50)

arr1=np.linspace(10,20,7,retstep=True)   #how much it is increased by
print(arr1)

print("*"*50)
##########################################################################################
arr=np.logspace(1,10,num=10) # automatically base will be 10 by default
print(arr)

print("*"*50)

arr=np.logspace(1,10,num=10,base=2,dtype=int) #output will be in powers like 2power1,2power2,.......
print(arr)

print("*"*50)'''
############################################################################################
'''arr=np.array([[1,2,3,4,5],[6,7,8,9,10]])
print(arr*5)   #each number is increased by 5...arr-3..arr*3....arr**2...

print("*"*50)
###########################################################################################
arr=np.array([[1,2,3,4,5],[6,7,8,9,10]])
print(arr.T)  #Transpose of the matrix
 
print("*"*50)'''
############################################################################################
'''arr=np.array([[1,2,3,4,5],[6,7,8,9,10]])
print(arr.max())   #To get the maximum element

print("*"*50)

arr=np.array([[1,2,3,4,5],[6,7,8,9,10],[19,36,78,22,46]])
print(arr.max(axis=1))   #To get the maximum element in row wise

print("*"*50)

arr=np.array([[1,2,3,4,5],[6,7,8,9,10],[19,36,78,22,46]])
print(arr.max(axis=0))   #To get the maximum element in colomn wise

print("*"*50)
print(arr.min(axis=0))'''
#############################################################################################
'''arr=np.array([[1,2,3,4,5],[6,7,8,9,10],[19,36,78,22,46]])
print(arr.sum())  #To get all sum in the matrix

print("*"*50)

arr=np.array([[1,2,3,4,5],[6,7,8,9,10],[19,36,78,22,46]])
print(arr.sum(axis=1))  #To get all sum in the row matrix 

print("*"*50)

arr=np.array([[1,2,3,4,5],[6,7,8,9,10],[19,36,78,22,46]])
print(arr.sum(axis=0))  #To get all sum in the colomn matrix 

print("*"*50)
#################################################################################################
arr=np.array([[1,2,3,4,5],[6,7,8,9,10],[19,36,78,22,46]])
print(arr.cumsum())
print("*"*50)

print(arr.cumsum(axis=1))  #Cummulative sum 1,,,,1+2,,,1+2+3,,,,1+2+3+4,,,,1+2+3+4+5,,,, row wise

print("*"*50)

arr=np.array([[1,2,3,4,5],[6,7,8,9,10],[19,36,78,22,46]])
print(arr.cumsum(axis=0))  #Cummulative sum colomn wise 1,,1+6,,1+6+19,,,check colomn wise

print("*"*50)'''

##################################################################################################
'''
arr1=np.array([[1,2,3,4,5],[6,7,8,9,10]])
arr2=np.array([[11,12,13,14,15],[16,17,18,19,20]])
print(arr1+arr2) # adds like a+b
print("*"*50)
print(arr1-arr2)  #subs like a-b
print("*"*50)
print(arr1*arr2)  #mul like a*b   a11*b11  a12*b12   a13*a23 element wise multiplication
print("*"*50)

arr1=np.array([[1,2,3],[6,7,8],[12,2,6]])
arr2=np.array([[11,12,13],[16,17,18],[7,5,9]])
print(arr1.dot(arr2))  #Original matrix multiplication

print("*"*50)
####################################################################################################
arr1=np.array([[3,2,1],[6,8,7],[12,2,6]])
print(np.sort(arr1,axis=None))   #TOtal matrix sorting
print("*"*50)
print(np.sort(arr1)) #Row wise sorting
print("*"*50)
print(np.sort(arr1,axis=0)) #Colomn wise sorting
####################################################################################################

#Array with same numbers
arr=np.full((3,3),10,dtype=float)
print(arr)'''































